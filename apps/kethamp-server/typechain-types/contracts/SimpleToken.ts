/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SimpleToken {
  export type CrossChainOriginStruct = {
    originChainId: BigNumberish;
    originContractAddress: AddressLike;
    originBlockHeight: BigNumberish;
    originTransactionIndex: BigNumberish;
    originEventIndex: BigNumberish;
  };

  export type CrossChainOriginStructOutput = [
    originChainId: bigint,
    originContractAddress: string,
    originBlockHeight: bigint,
    originTransactionIndex: bigint,
    originEventIndex: bigint
  ] & {
    originChainId: bigint;
    originContractAddress: string;
    originBlockHeight: bigint;
    originTransactionIndex: bigint;
    originEventIndex: bigint;
  };

  export type CrossChainMessageStruct = {
    targetChainId: BigNumberish;
    targetContractAddress: AddressLike;
    crossChainOperationType: BigNumberish;
    crossChainData: BytesLike;
    origin: SimpleToken.CrossChainOriginStruct;
  };

  export type CrossChainMessageStructOutput = [
    targetChainId: bigint,
    targetContractAddress: string,
    crossChainOperationType: bigint,
    crossChainData: string,
    origin: SimpleToken.CrossChainOriginStructOutput
  ] & {
    targetChainId: bigint;
    targetContractAddress: string;
    crossChainOperationType: bigint;
    crossChainData: string;
    origin: SimpleToken.CrossChainOriginStructOutput;
  };
}

export interface SimpleTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHAIN_ID_PRECOMPILE"
      | "VALIDATE_PROOF_PRECOMPILE"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "completed"
      | "decimals"
      | "getChainwebChainId"
      | "getCrossChainAddress"
      | "name"
      | "owner"
      | "redeemCrossChain"
      | "renounceOwnership"
      | "setCrossChainAddress"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferCrossChain"
      | "transferFrom"
      | "transferOwnership"
      | "verifySPV"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CrossChainAddressSet"
      | "CrossChainCompleted"
      | "CrossChainInitialized"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHAIN_ID_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATE_PROOF_PRECOMPILE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChainwebChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCrossChainAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemCrossChain",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossChainAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCrossChain",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySPV",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHAIN_ID_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATE_PROOF_PRECOMPILE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "completed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainwebChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrossChainAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossChainAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCrossChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySPV", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainAddressSetEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    crossChainAddress: AddressLike,
    executedBy: AddressLike
  ];
  export type OutputTuple = [
    chainId: bigint,
    crossChainAddress: string,
    executedBy: string
  ];
  export interface OutputObject {
    chainId: bigint;
    crossChainAddress: string;
    executedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainCompletedEvent {
  export type InputTuple = [
    crossChainOperationType: BigNumberish,
    crossChainData: BytesLike,
    origin: SimpleToken.CrossChainOriginStruct
  ];
  export type OutputTuple = [
    crossChainOperationType: bigint,
    crossChainData: string,
    origin: SimpleToken.CrossChainOriginStructOutput
  ];
  export interface OutputObject {
    crossChainOperationType: bigint;
    crossChainData: string;
    origin: SimpleToken.CrossChainOriginStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainInitializedEvent {
  export type InputTuple = [
    targetChainId: BigNumberish,
    targetContractAddress: AddressLike,
    crossChainOperationType: BigNumberish,
    crossChainData: BytesLike
  ];
  export type OutputTuple = [
    targetChainId: bigint,
    targetContractAddress: string,
    crossChainOperationType: bigint,
    crossChainData: string
  ];
  export interface OutputObject {
    targetChainId: bigint;
    targetContractAddress: string;
    crossChainOperationType: bigint;
    crossChainData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SimpleToken extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleToken;
  waitForDeployment(): Promise<this>;

  interface: SimpleTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHAIN_ID_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  VALIDATE_PROOF_PRECOMPILE: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  completed: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  getChainwebChainId: TypedContractMethod<[], [bigint], "view">;

  getCrossChainAddress: TypedContractMethod<
    [chainWebChainId: BigNumberish],
    [string],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  redeemCrossChain: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCrossChainAddress: TypedContractMethod<
    [chainWebChainId: BigNumberish, crossChainAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferCrossChain: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, targetChainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifySPV: TypedContractMethod<
    [proof: BytesLike],
    [
      [SimpleToken.CrossChainMessageStructOutput, string] & {
        crossChainMessage: SimpleToken.CrossChainMessageStructOutput;
        originHash: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHAIN_ID_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VALIDATE_PROOF_PRECOMPILE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "completed"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChainwebChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCrossChainAddress"
  ): TypedContractMethod<[chainWebChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemCrossChain"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCrossChainAddress"
  ): TypedContractMethod<
    [chainWebChainId: BigNumberish, crossChainAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferCrossChain"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, targetChainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifySPV"
  ): TypedContractMethod<
    [proof: BytesLike],
    [
      [SimpleToken.CrossChainMessageStructOutput, string] & {
        crossChainMessage: SimpleToken.CrossChainMessageStructOutput;
        originHash: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainAddressSet"
  ): TypedContractEvent<
    CrossChainAddressSetEvent.InputTuple,
    CrossChainAddressSetEvent.OutputTuple,
    CrossChainAddressSetEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainCompleted"
  ): TypedContractEvent<
    CrossChainCompletedEvent.InputTuple,
    CrossChainCompletedEvent.OutputTuple,
    CrossChainCompletedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainInitialized"
  ): TypedContractEvent<
    CrossChainInitializedEvent.InputTuple,
    CrossChainInitializedEvent.OutputTuple,
    CrossChainInitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CrossChainAddressSet(uint32,address,address)": TypedContractEvent<
      CrossChainAddressSetEvent.InputTuple,
      CrossChainAddressSetEvent.OutputTuple,
      CrossChainAddressSetEvent.OutputObject
    >;
    CrossChainAddressSet: TypedContractEvent<
      CrossChainAddressSetEvent.InputTuple,
      CrossChainAddressSetEvent.OutputTuple,
      CrossChainAddressSetEvent.OutputObject
    >;

    "CrossChainCompleted(uint64,bytes,tuple)": TypedContractEvent<
      CrossChainCompletedEvent.InputTuple,
      CrossChainCompletedEvent.OutputTuple,
      CrossChainCompletedEvent.OutputObject
    >;
    CrossChainCompleted: TypedContractEvent<
      CrossChainCompletedEvent.InputTuple,
      CrossChainCompletedEvent.OutputTuple,
      CrossChainCompletedEvent.OutputObject
    >;

    "CrossChainInitialized(uint32,address,uint64,bytes)": TypedContractEvent<
      CrossChainInitializedEvent.InputTuple,
      CrossChainInitializedEvent.OutputTuple,
      CrossChainInitializedEvent.OutputObject
    >;
    CrossChainInitialized: TypedContractEvent<
      CrossChainInitializedEvent.InputTuple,
      CrossChainInitializedEvent.OutputTuple,
      CrossChainInitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
