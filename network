#!/usr/bin/env bash

NETWORK_DIR=devnet
SOLIDITY_DIR=solidity
BLOCKSCOUT_DIR=blockscout

APP_NAME=$(basename ${0})

# ############################################################################# #
# Failure Messages

if [ -t 1 ] ; then
    B="\x1B[1;97m"
    RED="\x1B[31m"
    BRED="\x1B[1;31m"
    FRED="\x1B[2;31m"
    GREEN="\x1B[32m"
    YELLOW="\x1B[33m"
    BLUE="\x1B[34m"
    R="\x1B[0m"
else
    B=
    RED=
    BRED=
    FRED=
    GREEN=
    YELLOW=
    BLUE=
    R=
fi

function color-echo () {
    local color=$1
    shift
    echo -e "${color}$@${R}"
}

function fail-unknown () {
    local topic=$1
    local help=$2
    local cmd=$3
    { 
        echo -e "${BRED}Error: unknown" $topic "command: ${cmd}${R}"
        echo
        "${help}"
    } >&2
    exit 1
}

function fail-missing () {
    local topic=$1
    local help=$2
    { 
        echo -e "${BRED}Error: missing" $topic "command${R}"
        echo
        "${help}"
    } >&2
    exit 1
}

# ############################################################################# #
# Check dependencies

function check-tool () {
    command -v "$1" >/dev/null 2>&1 || 
        { color-echo $RED >&2 "Missing program $1 ($2), which is required. Exiting."; exit 1; }
}

function check-docker-compose () {
    docker compose version 1>/dev/null 2>&1 ||
        { color-echo $RED >&2 "Missing docker compose extension (https://docs.docker.com/compose/), which is required. Exiting."; exit 1; }
}

check-tool "docker" "https://www.docker.com"
check-docker-compose
check-tool "npm" "https://www.npmjs.com"
check-tool "npx" "https://docs.npmjs.com/cli/v8/commands/npx"
check-tool "jq" "https://jqlang.org"

# ############################################################################# #
# Usage and Help
#
# Please keep this updated

function info() {
    echo -e "${BLUE}$APP_NAME: Control Kadena EVM Devnet${R}"
}

function solidity-help () {
    echo -e "${YELLOW}Solidity commands:${R}"
    echo -e "  ${B}solidity setup${R}  install hardhat"
    echo -e "  ${B}solidity test${R}   run all simple token contract tests"
}

function blockscout-help () {
    echo -e "${YELLOW}Blockscout commands:${R}"
    echo -e "  ${B}blockscout pull${R}   pull container images for all blockscout services"
    echo -e "  ${B}blockscout start${R}  start block scope instances for the EVM chains"
    echo -e "  ${B}blockscout stop${R}   stop block scope instances for the EVM chains"
    echo -e "  (The UIs are served at http://localhost:8000 and http://localhost:8001.)"
}

function devnet-help () {
    echo -e "${YELLOW}Devnet commands:${R}"
    echo -e "  ${B}devnet pull${R}            pull container images for all devnet services"
    echo -e "  ${B}devnet start|up${R}        start the network with default components"
    echo -e "  ${B}devnet stop|down${R}       shutdown the network and reset all database"
    echo -e "  ${B}devnet allocations${R}     print information about pre-allocated wallets"
    echo -e "  ${B}devnet state|status${R}    print lastest consensus state for all chains in the network"
    echo -e "  ${B}devnet restart${R}         restart the chainweb-node service"
    echo -e "  ${B}devnet ports${R}           show ports of available services"
    echo -e "  ${B}devnet height-details${R}  return detailed information for a given block height or 'latest' in JSON"
    echo -e "  ${B}devnet services${R}        show status of services in the network (docker compose ps)"
    echo -e "  ${B}devnet chain-config${R}    show chainweb chain configuration"
    echo -e "  ${B}devnet curl${R}            run a curl command from within the docker network"
    echo -e "  ${B}devnet reth-db${R}         run a reth CLI database debugging command (first argument is the chain, i.e. 0 or 1)"
}

function usage() {
    echo -e "${YELLOW}Common commands:${R}"
    echo -e "  ${B}pull${R}  pull container images for all services"
    echo -e "  ${B}help${R}  print this message"
    echo
    devnet-help
    echo
    solidity-help
    echo 
    blockscout-help
}

# ############################################################################# #
# Solidity

# TODO check that the network is running
#
function solidity () {
    local CMD=$1
    case "$CMD" in
        help|h) 
            shift
            solidity-help
            ;;
        setup)
            shift
            (
                cd solidity &&
                npm install hardhat
            )
            ;;
        test)
            shift
            (
                cd solidity &&
                npx hardhat test
            )
            ;;
        "")
            shift
            fail-missing solidity solidity-help
            ;;
        *)
            shift
            fail-unknown solidity solidity-help "$CMD"
            ;;
    esac
}

# ############################################################################# #
# Blockscout

function blockscout () {
    local CMD=$1
    case "$CMD" in
        help|h) 
            shift
            blockscout-help
            ;;
        pull)
            shift
            (
                cd "$BLOCKSCOUT_DIR" && 
                docker compose -f chain-0.yaml pull
                docker compose -f chain-1.yaml pull
            )
            ;;
        start|up)
            shift
            (
                cd "$BLOCKSCOUT_DIR" &&
                docker compose -f chain-0.yaml up -d --pull=missing
                docker compose -f chain-1.yaml up -d --pull=missing
                color-echo $GREEN "chain 0: http://localhost:8000"
                color-echo $GREEN "chain 1: http://localhost:8001"
            )
            ;;
        stop|down|shutdown)
            shift
            (
                cd "$BLOCKSCOUT_DIR" && 
                docker compose -f chain-0.yaml down --remove-orphans -v
                docker compose -f chain-1.yaml down --remove-orphans -v
            )
            ;;
        "")
            shift
            fail-missing blockscout blockscout-help
            ;;
        *)
            shift
            fail-unknown blockscout blockscout-help "$CMD"
            ;;
    esac
}

# ############################################################################# #
# Devnet

function show-ports () {
    for i in chainweb-node chainweb-miner chainweb-evm-chain0 chainweb-evm-chain1 ; do
        echo "$i:"
        docker port $i
        echo
    done
}

function devnet () {
    local CMD=$1
    case "$CMD" in
        help|h) 
            shift
            devnet-help
            ;;
        pull)
            shift
            (
                cd "$NETWORK_DIR" && 
                docker compose pull
            )
            ;;
        start|up)
            shift
            (
                cd "$NETWORK_DIR" && 
                docker compose up -d && 
                docker compose run --rm -t allocations
            )
            ;;
        stop|down|shutdown)
            shift
            (
                cd "$NETWORK_DIR" && 
                docker compose down --remove-orphans -v
            )
            ;;
        restart)
            shift
            (
                cd "$NETWORK_DIR" && 
                docker compose restart chainweb-node
            )
            ;;
        state|status)
            shift
            (
                cd "$NETWORK_DIR" && 
                bash state.sh
            )
            ;;
        allocations)
            shift
            (
                cd "$NETWORK_DIR" &&
                docker compose run --rm -t allocations
            )
            ;;
        chain-config)
            shift
            (
                cd "$NETWORK_DIR" && 
                docker compose run -ti --rm curl -skL https://chainweb-node:1789/config | jq -rC '.payloadProviders'
            )
            ;;
        ports)
            shift
            (
                cd "$NETWORK_DIR" &&
                show-ports
            )
            ;;
        height-details)
            shift
            export HEIGHT=${1:-latest}
            shift
            (
                cd "$NETWORK_DIR" &&
                docker compose run --rm -t debug "source ./functions.sh; info $HEIGHT"
            )
            ;;
        curl)
            shift
            (
                cd "$NETWORK_DIR" &&
                docker compose run --rm -t curl "$@"
            )
            ;;
        services)
            shift
            (
                cd "$NETWORK_DIR" &&
                docker compose ps
            )
            ;;
        reth-db)
            shift
            export CHAIN=${1:-0}
            shift
            (
                cd "$NETWORK_DIR" &&
                docker compose exec "chainweb-evm-chain$CHAIN" kadena-reth db --datadir="/root/.local/share/reth/$((1789 + $CHAIN))/" "$@"
            )
            ;;
        "")
            shift
            fail-missing devnet devnet-help
            ;;
        *)
            shift
            fail-unknown devnet devnet-help "$CMD"
            ;;
    esac
}

# ############################################################################# #
# Main

CMD=$1

case "$CMD" in
    help|usage|h) 
        shift
        info
        echo
        usage "$@"
        ;;
    pull)
        shift
        devnet pull
        blockscout pull
        ;;
    devnet)
        shift
        devnet "$@"
        ;;
    blockscout)
        shift
        blockscout "$@"
        ;;
    solidity)
        shift
        solidity "$@"
        ;;
    "")
        shift
        fail-missing "" usage
        ;;
    *)
        shift
        fail-unknown "" usage "$CMD"
        ;;
esac

